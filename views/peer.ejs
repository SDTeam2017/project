<!DOCTYPE html>
<html>
  <head>
    <title>peer</title>
    <link rel='stylesheet' href='/stylesheets/style.css'>
  </head>
  <body>
    <div><h1 class="aliasname" id="alias_id" onclick="change_name()"></h1></div>
    <div>
      <label class="switch">
      <input type="checkbox" value = 'on' id ='blocker' onclick = 'block_access()'>
      <span class="slider round"></span>
      </label>
    </div>
    <video id="myVideo" class="myVideo"></video>
    <div class="dropdown">
      <h2 style="color:white; text-align: center;">Alias List</h2>
        <div class="dropdown-content">
             <table style="border-collapse: collapse; width:100%;" id="alias_list">
                <tr><th id = "peers" class="aliaslist">Peer Name</th> <th class="aliaslist">Available</th><th class="aliaslist" id = "attrCell">Attributes</th></tr>
              </table>
        </div>
    </div>
    <div id="videoTableDiv" class="videos"> 
      <table id="video_table" class="videos">
          
      </table>
    </div>
  </body>
</html>

<script src="/javascripts/peer.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/javascripts/DetectRTC.js"></script>
<script src="/javascripts/element-resize-detector.min.js"></script>
<script src="/javascripts/adapter.js"></script>

<script src="/javascripts/jquery.js"></script>

<script >
  
  //get the host (server) ip address
  var host= <%- JSON.stringify(host) %>
  //make a new peer on the peerjs server vs port 9000
	var peer = new Peer({host: host, port: 9000, path: '/', debug: 3});

  //socket functions
  var socket = io.connect();

//////////////////////my video section
  //fix later to getusermedia.js for all devices to work if they do not support webrtc
  navigator.mediaDevices.getUserMedia = navigator.mediaDevices.getUserMedia ||    
                         navigator.mediaDevices.webkitGetUserMedia ||
                         navigator.mediaDevices.mozGetUserMedia;
  var constraints = { audio: true, video:{ facingMode: "environment" }} ; //send only video, not audio. will be fixed later to be options for user to send one or both.
  var myHeight;
  var myWidth;
  var myCamera;
  var myMicrophone;
  var myOs;
  var myBrowser;
  var DeviceCharacteristics={};
  var attributeRowId;
  var myID;
  var calls={};
var erd = elementResizeDetectorMaker();

//////////////////////

  //when new device connects, add it to the alias list, which is in the form of a table. The function receive an object called client and has the value {"peername":new_client_name, "peerid":new_client_id}
  socket.on('add',function(client){

      var table = document.getElementById("alias_list");
      var row = table.insertRow(table.rows.length);

        var atrow = table.insertRow(table.rows.length);
   attributeRowId = client['peerid']+"at";
    client['AttributeRow']=attributeRowId;
   atrow.setAttribute("id", client['peerid']+"at")
   atrow.setAttribute("class", "attributeRow");




      row.setAttribute("id",client['peerid']) 
      row.setAttribute("class","aliaslist")     
      var peernameCell = row.insertCell(0);
      var peerblockCell = row.insertCell(1);
      /*var cameraCell= row.insertCell(2);
      var micCell= row.insertCell(3);
      var browserCell= row.insertCell(4);
      var osCell= row.insertCell(5);*/
            var attributeToggle =row.insertCell(2);
   attributeToggle.innerHTML = "+";
   var cameraCell= atrow.insertCell(0);
   var micCell= atrow.insertCell(1);
  var browserCell= atrow.insertCell(2);
   var osCell= atrow.insertCell(3);
      

      peerblockCell.innerHTML = client['blocking'];
      peernameCell.innerHTML = client['peername'];
      cameraCell.innerHTML =client['Camera'];
      micCell.innerHTML =client['Microphone'];
      browserCell.innerHTML =client['Browser'];
      osCell.innerHTML =client['OS'];

if(client['peerid']!=myID)
    {
      peernameCell.onclick = function() 
      {
        if(document.getElementById("vb_"+client['peerid'])==null)
        {
          if(peerblockCell.innerHTML=="false")
          {
           socket.emit('give_me_resolution',client['peerid']);//get video resolution of the peer clicked
          }
          else
          {
            alert("Client '"+client['peername']+"' is blocking access.");
          }
        }
        else
        {
          alert(peernameCell.innerHTML+" stream is already being viewed.");
        }

      };
    }
else
{
  peernameCell.onclick = function()
  {
    alert("Cannot view own stream");
  }
}

            attributeToggle.onclick = function(){
   console.log("Here:"+attributeRowId);
   $("#"+client['AttributeRow']).toggle();
   if(attributeToggle.innerHTML == "-")
     attributeToggle.innerHTML = "+";
   else
    attributeToggle.innerHTML = "-"
 };
 }); 

  //updating name of existing peer in the table
  socket.on('update',function(client){
      document.getElementById(client['peerid']).cells[1].innerHTML=client['blocking'];
      document.getElementById(client['peerid']).cells[0].innerHTML=client['peername'];
      document.getElementById(client['peerid']+"at").cells[0].innerHTML=client['Camera'];
      document.getElementById(client['peerid']+"at").cells[1].innerHTML=client['Microphone'];
      document.getElementById(client['peerid']+"at").cells[2].innerHTML=client['Browser'];
      document.getElementById(client['peerid']+"at").cells[3].innerHTML=client['OS'];
      $(".attributeRow").hide();

 }); 

  //removing peer alias list table when the device leaves the website and is removed from server
     socket.on('remove',function(client){
          var rowIndex = document.getElementById(client['peerid']).rowIndex;
          var table = document.getElementById("alias_list");
          table.deleteRow(rowIndex);
     });

  //after the server checks if an enterered alias name is valid or not, this function obtains the result. Result = {'name':alias_name_entered_by_user, 'exists':true_or_false}. If alias name already exists for another connected device, server returns true, otherwise false.
socket.on('name_result',function(result){
      if(result['exists']==false) //if alias name is not taken by another device
      {
         socket.emit('editname', result['name']); //change the display name in the alias table
         document.getElementById("alias_id").innerHTML ="Alias Name: "+result['name'];    //change displayed name on page
      }
      else    //if aliass name is taken
      {
        alert("Alias name exists.");
        change_name();  //ask user to pick a new alias name
      }
    });

    //function to change alias name
    function change_name (){
      var exists=true; //boolean variable to keep loop repeating until valid input is read.
      while(exists==true){
        var name = prompt("Please enter an Alias Name for this device:", peer.id);
        if (name==null||/^\s/.test(name)==true||name=="") {               
        //checks if name entered is valid. No spaces before, and no blank entries are allowed           
          alert("Alias name cannot be blank or have spaces in front");
        }
        else {
          //if valid input is read, stop the loop and send the name to the server to be checked if it is taken by another device already or not.
          exists=false;
          socket.emit('check_peer_name',name);
        }
      }
    }

//this runs right when a peer connects to the webpage
  peer.on('open', function(){
     myID=peer.id;
     socket.emit('getClientList');    //get all devices connected to server 
     socket.emit('addnewpeer',peer.id);   //add this device to the server client list
     document.getElementById("alias_id").innerHTML ="Alias Name: "+peer.id; //display peer.id on page
     change_name();  //ask user to change alias name of this device

     DetectRTC.load(loadDetectRTC);   //Load DetectRTC to find device characteristics
  });
  var bool=false;
  function block_access(){
    if(bool==false)
    {
      bool=true;
    }
    else{
      bool=false;
    }
    socket.emit('block_access',bool);
  }
  /*justin*/
  //grabs device characteristics and sends to server.
  function getDeviceCharacteristics()
  {
     if(DetectRTC.hasWebcam){
      myCamera= "Has Camera\n"+myWidth+"x"+myHeight;
       DeviceCharacteristics['Camera']=myCamera;
       DeviceCharacteristics['Height']=myHeight;
       DeviceCharacteristics['Width']=myWidth;
     }
     else{DeviceCharacteristics['Camera']="No Camera"; }

     if(DetectRTC.hasMicrophone){
      myMicrophone ="Has Microphone";
      DeviceCharacteristics['Microphone']= myMicrophone;
     }
     else{DeviceCharacteristics['Camera']="No Microphone"; }

     myOs = DetectRTC.osName + ": " + DetectRTC.osVersion;
     DeviceCharacteristics['OS']= myOs;
     myBrowser =  DetectRTC.browser.name + ": " + DetectRTC.browser.version;
     DeviceCharacteristics['Browser']= myBrowser;
     socket.emit("gotDeviceInfo",DeviceCharacteristics);
  }
  
  //DetectRTC must be loaded before methods can be called, getUserMedia must also be called once, before DetectRTC can work
     var localVideo= document.getElementById("myVideo");

  function loadDetectRTC()
  {
    navigator.mediaDevices.getUserMedia(constraints)
    .then(function(stream) {
     var video= document.getElementById("myVideo");
        video.srcObject  = stream;
        video.onloadedmetadata = function(e) 
        {
          myHeight=video.videoHeight;
          myWidth=video.videoWidth;
          getDeviceCharacteristics();
          if (stream) {
              stream.getTracks().forEach(function (track) {
                  track.stop();
                })
            }
        };
          
    })
    .catch(function(err) { console.log(err.name + ": " + err.message); });
  }

  /*justin*/
  
socket.on('get_resolution',function(peerid){
    //send my resoltuion to the peer with peerid
    socket.emit('my_resolution',{'peerid':peerid,'height':myHeight,'width':myWidth});
});
socket.on('here_is_resolution',function(data){
              var table=document.getElementById("video_table");
              var rows=table.rows;
              var videoboxid="vb_"+data['peerid'];
              var buttonid="button_"+data['peerid'];
              var spot_found=false;
              for(var x=0;x<rows.length;x++)
              {
                rowFreeSpace=rows[x].getAttribute("FreeSpace");
                if(parseInt(rowFreeSpace)>=(data['width']/2))
                {
                  var num_of_cells=rows[x].cells.length;
                  rows[x].setAttribute("FreeSpace",(rowFreeSpace-data['width']/2));
                  var newCell=rows[x].insertCell(num_of_cells);
                  newCell.setAttribute("width",(data['width']/2));
                  newCell.setAttribute("class","peerVideo");
                  newCell.innerHTML="<video id='"+videoboxid+"' class='peerVideo'></video><button class='videobutton' id='"+buttonid+"' onclick='close_stream("+buttonid+")'>X</button>";
                  spot_found=true;
                }
                
              }
              if(spot_found==false)
              {
                var rowWidth=document.getElementById("videoTableDiv").offsetWidth;
                var newRow=table.insertRow(rows.length);
                var newCell=newRow.insertCell(0); 
                newCell.setAttribute("width",(data['width']/2));
               // newCell.setAttribute("style","width:"+(data['width']/2)+"px;");
                newCell.setAttribute("class","peerVideo");
                newCell.innerHTML="<video id='"+videoboxid+"' class='peerVideo'></video><button class='videobutton' id='"+buttonid+"' onclick='close_stream("+buttonid+")'>X</button>";
                newRow.setAttribute("FreeSpace",(rowWidth-data['width']/2)+"px");
               /* var trueWidth=newCell.offsetWidth;
                newRow.setAttribute("FreeSpace",(rowWidth-trueWidth)+"px");
                erd.listenTo(newCell,function() {
                  
                  console.log(newCell.offsetWidth-trueWidth);
                              
              
              });*/
              }

                socket.emit('force_call',data['peerid']);

        //<video id="videobox" class="peerVideo"></video>
});

function close_stream(button_elem){
  var peerid=button_elem.id.substring(7);
  calls[peerid].close();
}
//window.addEventListener('resize', () => { alert("window resized"); });

//this is run when the server gets a notification that a device is requesting this devices stream. The server sends a 'make_call' signal to this device. The 'peer_id' received in the function below is the peer.id of the device that made the request for this peers stream.
socket.on('make_call',function(peer_id){

  navigator.mediaDevices.getUserMedia(constraints)
  .then(function(stream) {
        var video= document.getElementById("myVideo");
        video.srcObject  = stream;
        video.onloadedmetadata = function(e) {
          console.log(video.videoHeight)
              };
    peer.call(peer_id, stream);
  })
  .catch(function(err) { console.log(err.name + ": " + err.message); });
//make a call to the peer that requested this devices stream, and send the stream to them.
  
});

//this event is run when a stream is being sent to this device by another peer on the network.
   peer.on('call', function(call) {

      var video= document.getElementById("vb_"+call.peer);
      calls[call.peer]=call;
     
      call.answer(); // Answer the call with an A/V stream. 
      call.on('stream', function(mediaConnection) {
        //place the stream on to the page and once its meta data is loaded, play the stream
          
          video.srcObject  = mediaConnection;

          video.onloadedmetadata = function(e) {
            video.play();

          };

        });

      
      call.on('close',function(){
        delete calls[call.peer];
        var cell=video.parentNode; 
        var row=cell.parentNode;
        var tableBody=row.parentNode;
        if(row.cells.length==1)
          tableBody.removeChild(row);
        else
        {
        var cellWidth=cell.getAttribute('Width');
        var rowFreeSpace=row.getAttribute("FreeSpace");
        row.setAttribute("FreeSpace",cellWidth+rowFreeSpace);
        row.removeChild(cell);       
        }
      })
});


</script>
